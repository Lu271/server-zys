// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
)

func Use(db *gorm.DB) *Query {
	return &Query{
		db:                db,
		Player:            newPlayer(db),
		PlayerAchievement: newPlayerAchievement(db),
		PlayerItem:        newPlayerItem(db),
		PlayerSkill:       newPlayerSkill(db),
	}
}

type Query struct {
	db *gorm.DB

	Player            player
	PlayerAchievement playerAchievement
	PlayerItem        playerItem
	PlayerSkill       playerSkill
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                db,
		Player:            q.Player.clone(db),
		PlayerAchievement: q.PlayerAchievement.clone(db),
		PlayerItem:        q.PlayerItem.clone(db),
		PlayerSkill:       q.PlayerSkill.clone(db),
	}
}

type queryCtx struct {
	Player            *playerDo
	PlayerAchievement *playerAchievementDo
	PlayerItem        *playerItemDo
	PlayerSkill       *playerSkillDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Player:            q.Player.WithContext(ctx),
		PlayerAchievement: q.PlayerAchievement.WithContext(ctx),
		PlayerItem:        q.PlayerItem.WithContext(ctx),
		PlayerSkill:       q.PlayerSkill.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
